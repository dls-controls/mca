# % macro, P, Device Prefix
# % macro, PORT, Asyn port
# % macro, SCALER, Scaler card PV
# % macro, name, Object and gui association name
# % macro, edmMacros, macro to pass to edm screen
# % gui, $(name), edm, sis3820.edl, $(edmMacros)
# % macro, gda_name, Name for GDA
# % macro, gda_desc, Description for GDA
# %gdatag,template,mcaGroup,$(gda_name),$(gda_desc)

# SIS38XX.template
# Mark Rivers
# April 29, 2011

record(bi,"$(P)SNL_Connected") {
  field(ZNAM, "Not connected")
  field(ZSV,  "MAJOR")
  field(ONAM, "Connected")
  field(OSV,  "NO_ALARM")
}

# %gdatag,binary,rw,$(gda_name),ERASE,Clear all spectrums
record(seq,"$(P)EraseAll") {
  field(LNK1,  "$(SCALER).CONT PP")
  field(DOL1,  "0")
  field(LNK2,  "$(P)EraseAllCalc.DISA PP")
  field(DOL2,  "0")
}

record(calcout,"$(P)EraseAllCalc") {
  field(SCAN, ".1 second")
  field(CALC, "A#2")
  field(INPA, "$(SCALER).SS")  
  field(OOPT, "When Non-zero")
  field(OUT,  "$(P)EraseAllTrig.PROC")  
  field(DISA, "1")  
}

record(seq,"$(P)EraseAllTrig") {
  field(LNK1,  "$(P)EraseAllCalc.DISA PP")
  field(DOL1,  "1")
  field(LNK2,  "$(P)EraseAllReal.PROC")
  field(DOL2,  "1")
# Allow autocount 5 seconds after erase has started  
  field(LNK3,  "$(SCALER):AutoCount.PROC")
  field(DOL3,  "1")
  field(DLY3,  "5")
}

record(bo,"$(P)EraseAllReal") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_ERASE")
  field(ZNAM, "Done")
  field(ONAM, "Erase")
  field(VAL,  "1")
  field(FLNK, "$(P)ReadAllOnce")
}

# %gdatag,binary,rw,$(gda_name),ERASESTART,Clear all spectrums and start acquiring
record(seq,"$(P)EraseStart") {
  field(LNK1,  "$(SCALER).CONT PP")
  field(DOL1,  "0")
  field(LNK2,  "$(P)EraseStartCalc.DISA PP")
  field(DOL2,  "0")
}

record(calcout,"$(P)EraseStartCalc") {
  field(SCAN, ".1 second")
  field(CALC, "A#2")
  field(INPA, "$(SCALER).SS")  
  field(OOPT, "When Non-zero")
  field(OUT,  "$(P)EraseStartTrig.PROC")  
  field(DISA, "1")  
}

record(seq,"$(P)EraseStartTrig") {
  field(LNK1,  "$(P)EraseStartCalc.DISA PP")
  field(DOL1,  "1")
  field(LNK2,  "$(P)EraseStartReal.PROC")
  field(DOL2,  "1")
}

record(bo,"$(P)EraseStartReal") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_ERASE")
  field(ZNAM, "Done")
  field(ONAM, "Erase")
  field(VAL,  "1")
  field(FLNK, "$(P)StartAll.PROC")
}

# %gdatag,binary,rw,$(gda_name),START,Start acquiring
record(seq,"$(P)StartAll") {
  field(LNK1,  "$(SCALER).CONT PP")
  field(DOL1,  "0")
  field(LNK2,  "$(P)StartAllCalc.DISA PP")
  field(DOL2,  "0")
}

record(calcout,"$(P)StartAllCalc") {
  field(SCAN, ".1 second")
  field(CALC, "A#2")
  field(INPA, "$(SCALER).SS")  
  field(OOPT, "When Non-zero")
  field(OUT,  "$(P)StartAllTrig.PROC")  
  field(DISA, "1")  
}

record(seq,"$(P)StartAllTrig") {
  field(LNK1,  "$(P)StartAllCalc.DISA PP")
  field(DOL1,  "1")
  field(LNK2,  "$(P)StartAllReal.PROC")
  field(DOL2,  "1")
}

record(bo,"$(P)StartAllReal") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_START_ACQUIRE")
  field(ZNAM, "Done")
  field(ONAM, "Start")
  field(VAL,  "1")
  field(FLNK, "$(P)SetAcquiring.PROC")
}

record(bo,"$(P)SetAcquiring") {
  field(OUT,  "$(P)Acquiring PP MS")
  field(ZNAM, "Done")
  field(ONAM, "Set")
  field(VAL,  "1")
  field(FLNK, "$(P)SetClientWait.PROC")
}

# %gdatag,binary,ro,$(gda_name),ACQ,Acquiring status
record(busy,"$(P)Acquiring") {
  field(ZNAM, "Done")
  field(ONAM, "Acquiring")
  field(FLNK, "$(SCALER):AutoCount")  
}

# %gdatag,binary,rw,$(gda_name),STOP,Stop acquiring
record(bo,"$(P)StopAll") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_STOP_ACQUIRE")
  field(ZNAM, "Done")
  field(ONAM, "Stop")
  field(VAL,  "1")
}

# %gdatag,pv,rw,$(gda_name),TACQ,Set total acquisition time
#% autosave 2 VAL
record(ao,"$(P)PresetReal") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),0)MCA_PRESET_REAL")
  field(VAL,  "0.0")
  field(PREC, "3")
}

record(bi,"$(P)HardwareAcq") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0)MCA_ACQUIRING")
  field(ZNAM, "Done")
  field(ONAM, "Acquiring")
  field(SCAN, "I/O Intr")
}

# %gdatag,pv,ro,$(gda_name),TREAL,Real time since start of acquisition
record(ai,"$(P)ElapsedReal") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT),0)MCA_ELAPSED_REAL")
  field(PREC, "2")
  field(SCAN, "I/O Intr")
}

# %gdatag,pv,rw,$(gda_name),READRATE,Data update rate,<pv>.SCAN
#% autosave 2 VAL SCAN
record(bo,"$(P)ReadAll") {
  field(SCAN, "1 second")
  field(DISV, "0")
  field(SDIS, "$(P)Acquiring NPP NMS")
  field(ZNAM, "Done")
  field(ONAM, "Read")
  field(FLNK, "$(P)ReadAllOnce")
}

record(bo,"$(P)ReadAllOnce") {
  field(VAL,  "1")
  field(OUT,  "$(P)DoReadAll.VAL PP MS")
}

record(bo,"$(P)DoReadAll") {
  field(ZNAM, "Done")
  field(ONAM, "Read")
}

# %gdatag,pv,rw,$(gda_name),NBINS,Number of bins to use in spectrum
#% autosave 2 VAL
record(longout,"$(P)NuseAll") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_NUM_CHANNELS")
}

record(longin,"$(P)CurrentChannel") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0)SIS38XX_CURRENT_CHANNEL")
  field(SCAN, "I/O Intr")
}

# %gdatag,pv,rw,$(gda_name),TDWELL,Set integration time [s] for incrementing bin number
#% autosave 2 VAL
record(ao,"$(P)Dwell") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT),0)MCA_DWELL_TIME")
  field(VAL,  "0.1")
  field(PREC, "3")
}

# %gdatag,binary,rw,$(gda_name),BINADV,Set internal or external bin advance signal
#% autosave 2 VAL
record(bo,"$(P)ChannelAdvance") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_CH_ADV_SOURCE")
  field(ZNAM, "Internal")
  field(ONAM, "External")
}

#% autosave 2 VAL
record(bo,"$(P)InitialChannelAdvance") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)SIS38XX_INITIAL_CHANNEL_ADVANCE")
  field(ZNAM, "No")
  field(ONAM, "Yes")
}

record(bo,"$(P)CountOnStart") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)SIS38XX_COUNT_ON_START")
  field(ZNAM, "No")
  field(ONAM, "Yes")
}

record(bo,"$(P)SoftwareChannelAdvance") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)SIS38XX_SOFTWARE_CHANNEL_ADVANCE")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(VAL,  "1")
}

# Binary record to enable switching input 1
# between internal 25 MHz (SIS3801) or 50MHz (SIS3820) reference clock and
# and external source 
#% autosave 2 VAL
record(bo, "$(P)Channel1Source") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_CHANNEL1_SOURCE")
  field(ZNAM, "Int. clock")
  field(ONAM, "External")
}

# %gdatag,pv,rw,$(gda_name),EXTPRE,External bin advance prescaler
#% autosave 2 VAL
record(longout,"$(P)Prescale") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)MCA_PRESCALE")
  field(VAL,  "1")
}

#% autosave 2 VAL
record(bo,"$(P)EnableClientWait") {
  field(PINI, "YES")
  field(ZNAM, "Disable")
  field(ONAM, "Enable")
}

record(bo,"$(P)SetClientWait") {
  field(DISV, "0")
  field(SDIS, "$(P)EnableClientWait NPP NMS")
  field(OMSL, "closed_loop")
  field(DOL,  "1")
  field(OUT,  "$(P)ClientWait PP MS")
  field(ONAM, "SetClientWait")
  field(ZNAM, "Done")
}

#% autosave 2 VAL
record(busy,"$(P)ClientWait") {
}

# This record reflects the current mode of the
# driver.
# Can be either MCA or SCALER (or UNDEFINED).
# Use it to disable the autocount feature of the 
# scaler record when in MCA mode.
record(mbbi, "$(P)AcquireMode") {
  field(DESC, "SIS38XX acquire mode")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SIS38XX_ACQUIRE_MODE")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "MCS")
  field(ONST, "Scaler")
  field(SCAN, "I/O Intr")
}

record(bo, "$(SCALER):AutoCount") {
  field(DESC, "Autocount mode managed by MCS mode")
  field(OUT,  "$(SCALER).CONT PP")
  field(ZNAM, "OneShot")
  field(ONAM, "AutoCount")
  field(PINI, "YES")
  field(VAL,  "0")
  field(SDIS, "$(P)Acquiring")
}

# MUXOUT analogue record to enable switching
# of the multiplexed output on output 7.
#% autosave 2 VAL
record(ao, "$(P)MUXOutput") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_MUX_OUT")
  field(HOPR, "32")
  field(LOPR, "0")
  field(VAL,  "3")
  field(DESC, "Route to output 7")
}


# Toggle the USER LED which also toggles the
# control output signal 8.
#% autosave 2 VAL
record(bo, "$(P)UserLED") {
  field(DESC, "Flash user LED")
  field(DTYP, "asynInt32")
  field(SCAN, "Passive")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_LED")
  field(ZNAM, "Low/Off")
  field(ONAM, "High/On")
}

#% autosave 2 VAL
record(mbbo, "$(P)InputMode") {
  field(PINI, "YES")
  field(DESC, "SIS38XX input mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_INPUT_MODE")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(ZRST, "Mode 0")
  field(ONST, "Mode 1")
  field(TWST, "Mode 2")
  field(THST, "Mode 3")
  field(FRST, "Mode 4")
  field(FVST, "Mode 5")
  field(SXST, "Mode 6")
  field(VAL,  "3")
}

#% autosave 2 VAL
record(mbbo, "$(P)OutputMode") {
  field(PINI, "YES")
  field(DESC, "SIS38XX output mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_OUTPUT_MODE")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Mode 0")
  field(ONST, "Mode 1")
  field(TWST, "Mode 2")
  field(THST, "Mode 3")
  field(VAL,  "3")
}

record(bo, "$(P)OutputPolarity") {
  field(PINI, "YES")
  field(DESC, "SIS38XX output polarity")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_OUTPUT_POLARITY")
  field(ZNAM, "Normal")
  field(ONAM, "Inverted")
}

record(bo, "$(P)LNEStretcherEnable") {
  field(PINI, "YES")
  field(DESC, "SIS3820 LNE Stretcher Enable")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_LNE_OUTPUT_STRETCHER")
  field(ZNAM, "Disable")
  field(ONAM, "Enable")
}

record(bo, "$(P)LNEOutputPolarity") {
  field(PINI, "YES")
  field(DESC, "SIS3832 LNE output polarity")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_LNE_OUTPUT_POLARITY")
  field(ZNAM, "Normal")
  field(ONAM, "Inverted")
}

record(ao, "$(P)LNEOutputWidth") {
  field(PINI, "YES")
  field(DESC, "SIS3832 LNE output width")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_LNE_OUTPUT_WIDTH")
  field(PREC, "4")
}

record(ao, "$(P)LNEOutputDelay") {
  field(PINI, "YES")
  field(DESC, "SIS3832 LNE output delay")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)SIS38XX_LNE_OUTPUT_DELAY")
  field(PREC, "4")
}

record(mbbi, "$(P)Model") {
  field(PINI, "YES")
  field(DESC, "SIS38XX model")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SIS38XX_MODEL")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "SIS3801")
  field(ONST, "SIS3820")
}

record(longin,"$(P)Firmware") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0)SIS38XX_FIRMWARE")
}

record(longin,"$(P)MaxChannels") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0)SIS38XX_MAX_CHANNELS")
}



# asyn record for debugging
record(asyn, "$(P)Asyn") {
  field(PORT, "$(PORT)")
}

########################## DLS comment ###################
#
# The following AO records are for EDM screen tweaks only!
#
record(ao, $(P)ZERO1) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO2) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO3) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO4) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO5) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO6) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO7) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO8) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO9) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO10) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO11) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO12) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO13) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO14) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO15) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO16) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO17) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO18) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO19) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO20) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO21) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO22) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO23) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO24) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO25) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO26) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO27) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO28) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO29) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO30) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO31) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}
record(ao, $(P)ZERO32) {
  field(DESC, "EDM screen fix")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
}

######### END EDM screen fix #############################
